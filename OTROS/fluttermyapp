import 'package:flutter/material.dart';
import 'package:speech_to_text/speech_to_text.dart' as stt;

void main() {
  runApp(AsistenteVirtual());
}

class AsistenteVirtual extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: ChatScreen(),
    );
  }
}

class ChatScreen extends StatefulWidget {
  @override
  _ChatScreenState createState() => _ChatScreenState();
}

class _ChatScreenState extends State<ChatScreen> {
  TextEditingController _controller = TextEditingController();
  List<Map<String, String>> messages = [];
  stt.SpeechToText _speech = stt.SpeechToText();
  bool _isListening = false;
  String _text = "";

  void sendMessage(String text) {
    setState(() {
      messages.add({"user": text});
      String response = getAIResponse(text);
      messages.add({"bot": response});
    });
    _controller.clear();
  }

  String getAIResponse(String question) {
    Map<String, String> respuestas = {
      "¿Qué es un diálogo?": "Es una conversación entre dos o más personas donde intercambian ideas.",
      "¿Qué es la alimentación saludable?": "Es comer alimentos nutritivos como frutas, verduras y proteínas.",
      "¿Cómo puedo resolver un conflicto?": "Escuchando a la otra persona y llegando a acuerdos."
    };
    return respuestas[question] ?? "No entiendo la pregunta, intenta otra.";
  }

  void _startListening() async {
    bool available = await _speech.initialize();
    if (available) {
      setState(() => _isListening = true);
      _speech.listen(onResult: (result) {
        setState(() {
          _text = result.recognizedWords;
        });
      });
    }
  }

  void _stopListening() {
    setState(() => _isListening = false);
    _speech.stop();
    sendMessage(_text);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Asistente Virtual 4º Grado")),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              itemCount: messages.length,
              itemBuilder: (context, index) {
                bool isUser = messages[index].containsKey("user");
                return ListTile(
                  title: Align(
                    alignment: isUser ? Alignment.centerRight : Alignment.centerLeft,
                    child: Container(
                      padding: EdgeInsets.all(10),
                      decoration: BoxDecoration(
                        color: isUser ? Colors.blueAccent : Colors.greenAccent,
                        borderRadius: BorderRadius.circular(10),
                      ),
                      child: Text(
                        isUser ? messages[index]["user"]! : messages[index]["bot"]!,
                        style: TextStyle(color: Colors.white),
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
          Row(
            children: [
              IconButton(
                icon: Icon(Icons.mic),
                onPressed: _isListening ? _stopListening : _startListening,
              ),
              Expanded(
                child: TextField(
                  controller: _controller,
                  decoration: InputDecoration(hintText: "Pregunta algo..."),
                ),
              ),
              IconButton(
                icon: Icon(Icons.send),
                onPressed: () => sendMessage(_controller.text),
              ),
            ],
          ),
        ],
      ),
    );
  }
}
